¬°Perfecto! Incorporar la pila tecnol√≥gica espec√≠fica y la estrategia de la base de datos es clave para que la documentaci√≥n sea un reflejo fiel del proyecto.

Aqu√≠ tienes la versi√≥n definitiva del documento, integrando que el backend es **Node.js con Express**, la base de datos es **MySQL** y se gestiona con un **√∫nico script de creaci√≥n**.

***

## Documentaci√≥n Maestra: Sistema de Gesti√≥n POS

Este documento es la "fuente de la verdad" para el desarrollo y la reestructuraci√≥n del sistema de punto de venta. Describe un sistema **consistente, seguro, escalable y multi-tenant**, donde toda la l√≥gica de negocio reside en el backend.

---

### **Pila Tecnol√≥gica y Estrategia de Despliegue** üõ†Ô∏è

* **Backend:** El motor del sistema est√° construido sobre **Node.js** utilizando el framework **Express.js**. Esta elecci√≥n permite un desarrollo √°gil y un alto rendimiento para las operaciones de la API.
* **Base de Datos:** Toda la informaci√≥n se almacena en una base de datos relacional **MySQL**.
* **Estrategia de Base de Datos:** Para simplificar el desarrollo y garantizar un entorno limpio y predecible, el sistema no utiliza migraciones incrementales. En su lugar, se emplea un **√∫nico esquema de creaci√≥n**. La base de datos completa se genera desde cero ejecutando un solo comando (`npm run db:create`), lo que asegura que todos los entornos de desarrollo partan de una estructura id√©ntica y actualizada.

---

### **Principios Fundamentales del Sistema** üèõÔ∏è

Para que el sistema funcione de manera robusta y segura, se basa en cuatro pilares esenciales:

* **L√≥gica Centralizada en el Backend:** Toda la "inteligencia" del sistema reside en el servidor de **Express.js**. Acciones como calcular el stock despu√©s de una venta o crear una nueva empresa al registrarse no ocurren en la base de datos, sino en un n√∫cleo centralizado. Esto hace que el sistema sea m√°s seguro, f√°cil de actualizar y predecible.
* **Nada se Borra Realmente (Soft Deletes):** Cuando un usuario "elimina" algo, como un producto o un cliente, el sistema no lo borra de forma permanente. Simplemente lo marca como "eliminado" y lo oculta de la vista. Esto es crucial para mantener la integridad de los reportes hist√≥ricos y permite recuperar informaci√≥n si es necesario.
* **Aislamiento Total de Datos (Multi-Tenancy):** El sistema est√° dise√±ado para que m√∫ltiples empresas puedan usarlo simult√°neamente sin que ninguna pueda ver la informaci√≥n de otra. Cada dato, desde un producto hasta una venta, est√° estrictamente asociado a una √∫nica empresa. Es como si cada negocio operara en su propia burbuja privada dentro de la misma aplicaci√≥n.
* **Nomenclatura Consistente:** Todos los elementos t√©cnicos del sistema siguen un est√°ndar de nombres en espa√±ol y un formato predecible. Esto, aunque es un detalle interno, se traduce en un desarrollo m√°s r√°pido y menos propenso a errores, lo que garantiza un sistema m√°s estable para el usuario final.

---

### **Flujos de Negocio Cr√≠ticos**

Estos son los procesos clave que demuestran c√≥mo funciona el sistema en momentos cruciales.

#### **Flujo 1: El Nacimiento de un Nuevo Negocio en el Sistema**

Este es el proceso que ocurre cuando un nuevo due√±o de negocio (un **Superadmin**) se registra por primera vez, t√≠picamente usando su cuenta de Google.

1.  **Registro y Verificaci√≥n:** El usuario se autentica con Google. El backend de Express recibe sus datos b√°sicos (nombre, email) y comprueba en la base de datos MySQL que no exista previamente.
2.  **Creaci√≥n At√≥mica del Entorno:** Al ser un usuario nuevo, el sistema inicia un proceso de "creaci√≥n de entorno" que es **transaccional**, lo que significa que todos los pasos deben completarse con √©xito. Si uno falla, todo se deshace para evitar inconsistencias.
    * Primero, crea el registro del **usuario** y le asigna el rol de **Superadmin**.
    * Inmediatamente, crea una **empresa** a su nombre (ej. "La Empresa de Juan P√©rez").
    * Luego, para esa empresa, genera autom√°ticamente una **sucursal** por defecto ("Sucursal Principal").
    * Dentro de esa sucursal, crea un **almac√©n** ("Almac√©n Principal") y una **caja registradora** ("Caja 1").
    * Finalmente, crea entidades b√°sicas para que el negocio pueda operar desde el minuto uno: un "Cliente Gen√©rico", m√©todos de pago como "Efectivo" y "Tarjeta", y una categor√≠a de productos "General".
3.  **Acceso Inmediato:** Una vez que todo este ecosistema se ha creado, el usuario es autom√°ticamente logueado y ya puede empezar a configurar su negocio.

---

### **Modelo de Seguridad y Acceso a Datos** üîê

El sistema garantiza que cada usuario vea √∫nicamente lo que le corresponde mediante un **middleware de seguridad en Express.js**, que act√∫a como un guardia en la puerta de entrada a los datos.

1.  **Credencial de Acceso (Token):** Cuando un usuario inicia sesi√≥n, recibe una credencial digital (un token JWT) que es como su pase de acceso personal.
2.  **Verificaci√≥n en Cada Petici√≥n:** Cada vez que el usuario intenta hacer algo (como ver productos o registrar una venta), presenta esta credencial en la cabecera de la petici√≥n a la API.
3.  **El Guardia (Middleware):** El backend de Express intercepta la petici√≥n, revisa la validez de la credencial y, lo m√°s importante, consulta qui√©n es el usuario y a qu√© **empresa** pertenece.
4.  **Contexto Seguro:** Con esta informaci√≥n, el sistema adjunta una etiqueta invisible a la acci√≥n del usuario que dice: "Esta persona pertenece a la Empresa X". A partir de ese momento, cualquier consulta a la base de datos MySQL llevar√° autom√°ticamente el filtro "s√≥lo para la Empresa X", garantizando el aislamiento total de los datos.

---

### **Casos de Uso por Rol de Usuario**

Aqu√≠ se describe qu√© hace cada tipo de persona dentro del sistema.

#### **üëë Superadmin (Due√±o del Negocio)**

El Superadmin tiene el control total sobre la configuraci√≥n y supervisi√≥n de su negocio.

* **Configuraci√≥n Inicial:** Tras el registro, su primera tarea es personalizar el sistema: sube el logo de su empresa, define el impuesto local (ej. IVA), la moneda, y el texto que aparecer√° al pie de los tickets de venta.
* **Estructura del Negocio:** Si abre nuevos locales, crea m√°s **sucursales**. Dentro de cada una, define sus **almacenes** y **cajas registradoras**.
* **Gesti√≥n de Cat√°logo:** Es el responsable de crear las **categor√≠as** de productos y de dar de alta cada **producto**, estableciendo su precio de venta, costo, y si se controlar√° su inventario.
* **Gesti√≥n de Personal:** Cuando contrata a un empleado, crea un nuevo **usuario** en el sistema, le asigna un rol (como "Cajero") y lo vincula a una sucursal y caja espec√≠ficas. Tambi√©n decide a qu√© partes del sistema puede acceder ese empleado.
* **Supervisi√≥n y An√°lisis:** Su d√≠a a d√≠a implica revisar el **Dashboard** para ver las ventas totales, las ganancias, los productos m√°s vendidos y el flujo de efectivo. Puede generar reportes para saber qu√© productos est√°n por agotarse y revisar los cierres de caja de sus empleados para controlar el dinero.

#### **üë§ Empleado (Cajero / Vendedor)**

El empleado tiene un rol operativo, centrado casi exclusivamente en el punto de venta.

* **Inicio y Cierre de Turno:** Su jornada comienza iniciando sesi√≥n. Realiza la **"Apertura de Caja"**, donde registra la cantidad de dinero base con la que empieza. Al finalizar, hace el **"Cierre de Caja"**, donde el sistema le informa cu√°nto dinero deber√≠a haber seg√∫n las ventas, y √©l introduce cu√°nto dinero cont√≥ f√≠sicamente para registrar cualquier diferencia.
* **Proceso de Venta:** Es su tarea principal. Utiliza un lector de c√≥digo de barras o busca productos por nombre para a√±adirlos al carrito de compra. Si el cliente no quiere un producto, lo quita, y el sistema autom√°ticamente devuelve esa unidad al inventario. Procesa el pago eligiendo el m√©todo (efectivo, tarjeta), y el sistema calcula el vuelto si es necesario. Al confirmar, la venta se registra, el stock se descuenta y se imprime el ticket.
* **Movimientos de Caja:** Si necesita usar dinero de la caja para algo que no es una venta (como pagarle a un repartidor), registra un **"egreso"** para que el dinero est√© justificado al final del d√≠a.

#### **üõçÔ∏è Usuario Normal (Cliente)**

El cliente es la raz√≥n de ser del negocio, pero no interact√∫a directamente con el software.

* **Realizar una Compra:** Elige sus productos, se acerca a la caja y realiza el pago. Si desea una factura con sus datos, se los proporciona al cajero, quien lo puede registrar en el sistema como un nuevo cliente. Si no, la venta se asocia a un "Cliente Gen√©rico". Finalmente, recibe su ticket impreso.
* **Solicitar una Devoluci√≥n:** Si necesita devolver un producto, presenta su ticket. El cajero busca la venta original en el sistema y procesa la devoluci√≥n, lo que internamente revierte la operaci√≥n: el producto vuelve al inventario y el dinero se registra como una salida de la caja.